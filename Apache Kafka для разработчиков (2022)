1 урок. Введение

План
1 день
-устройство kafka
-основы взаимодействия
-продвинутое взаимодействие
2 день
-алгоритмы с использованием kafka
-критическая бизнес логика на kafka
3 день
-kafka как синхронизатор(аналог mutex, monitor, semaphore в java)
-kafka как БД

-Зачем создали kafka?
Для закрытия потребности в обработке больших потоков данных между различными частями платформы, приложения, сервисов.
-Как используют kafka?
Используется, когда речь заходит про обработку больших объемов данных в реальном времени, а также производительности и сохранности данных.
примеры использования:
брокер сообщений для межсервисного взаимодействия
обработка событий от пользователей
система очередей
журналирование
сбор метрик
commit log(для транзакций)
центральное хранилище информации

2.1 урок. Термины в kafka мире.
термины:
-кластер - набор инстансов kafka(kafka-broker) + БД(zookeeper). Это некий черный ящик к кторому обращается пользователь.
к кластерам могут подключаться сервисы. к сервисам могут подключаться клиенты.
-нода - один инстанс kafka(kafka-broker). минимальная логическая единица.
-датацентр - набор хардвар-серверов. кластер kafka может быть(но не обязательно) развернут между несколькими датацентрами.
-producer - система, которая пишет сообщения(record) в kafka. свой сервис. пишет сообщения в topic кластера kafka.
-consumer - система, которая потребляет сообщения из kafka. свой сервис.
сложно уследить за всеми consumer'ами. в случае изменения формата сообщения(record), которое пишет producer, может быть конфуз с тем, что consumer'ы могут будут не готовы или могут не знать, что нужно изменить получаемый формат.
"Видишь consumer? Нет. А он есть!"
-topic - логическая единица внутри kafka. используется для принятия-передачи сообщений(record) между producer-consumer.
в каждый topic должны записываться собщения с кокретным атомарным смыслом(если topic называется order, то в него можно писать только "заказы", но никак не "дни недели" и др.)
данные должны делится по topic'ам, для их логического распределения в системе
один кластер kafka может включать в себя большое кол-во topic'ов
-record - сообщение с определенным форматом. Записывается в topic producer'ом. Читается из topic'а consumer'ом.
структура сообщения: key-value-timestamp(key - способ управления партициями; value - по сути это payload с произвольной последовательностью байтов; timestamp - временная метка успешной доставки и сохранения сообщения в ноде kafka)
-партиция - составляющая часть topic'а. сообщения в topic'е распределяются в случайном порядке по партициям и сохраняются в них

CAP Theorem - теорема распределенных систем:
консистентность<->доступность<->сетевые отказы - реализуемо только 2 из 3 пунктов
консистентность<->доступность - это Oracle SQL
доступность<->сетевые отказы - это CouchDB
консистентность<->сетевые отказы - это MongoDB
консистентность - это ожидаемое состояние данных в хранилище данных
доступность - это состояние системы при котором она может что-то ответить в случае обращения к ней
сетевые отказы - это проблемы аппаратного и программного обеспечения, которые непосредственно связаны с сетью

Zookeeper - обслуживающая система kafka. по сути БД.
сосредоточена на том, чтобы обеспечить максимальную скорость чтения и не очень максимальную скорость записи.
может масштабироваться. обеспечивает отказоустойчивость.
kafka хранит в ней свои конфигурационные настройки.

3.Архитектура kafka
3.1.Партиционирование(шардирование)
-каждый producer пишет во все(?) брокеры kafka
-topic существует только на логическом уровне представления. на физическом уровне topic'ов не существует
-topic по сути является набором партиций
    оптимальное кол-во партиций для одного consumer'а - 4шт.
kafka распределяет партиции самостоятельно, и не всегда это делает оптимально:
к примеру при создании одного топика кафка, может разместить все пратиции на одном узле(а это не оптимально)
только если создать большое кол-во партиций, то они более или менне равномерно распределеяться по нодам
но слишком много партиций - это ресурсозатратно
чем больше партиций тем большая нагрузка может быть выдержана
-кафка отказоустойчива за счет репликации
виды реплик: leader-folower
leader - основная реплика для записи-чтения
folower - реплики для бэкапа основной реплики
    оптимальное кол-во реплик - 3шт.

